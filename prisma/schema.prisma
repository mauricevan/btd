// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   // 'admin' of 'user'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  notifications Notification[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  articleNumber String   @unique
  description   String?
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  purchasePrice Float
  sellingPrice  Float
  btwPercentage Int
  priceInclBtw  Float?
  image         String?
  stock         Int      @default(0)
  minStock      Int      @default(5)
  isLowStock    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  customerProducts CustomerProduct[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   // 'open', 'afgerond', etc.
  feedback    String?
  completedAt DateTime?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  pdfName     String?
  pdfUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notifications Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    Int?
  createdAt DateTime @default(now())
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phone       String?
  type        String   // 'particulier' of 'bedrijf'
  address     String?
  notes       String?
  customerProducts CustomerProduct[]
  createdAt   DateTime @default(now())
  lastContact DateTime?
}

model CustomerProduct {
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  assignedAt DateTime @default(now())

  @@id([customerId, productId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]
}
